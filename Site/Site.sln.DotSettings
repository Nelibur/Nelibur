<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=InvocationIsSkipped/@EntryIndexedValue">HINT</s:String>
	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=NotAccessedField_002ELocal/@EntryIndexedValue">ERROR</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_SIMPLE_LINQ_ON_SINGLE_LINE/@EntryValue">False</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_MULTIPLE_TYPE_PARAMEER_CONSTRAINTS_STYLE/@EntryValue">CHOP_ALWAYS</s:String>
	<s:String x:Key="/Default/CodeStyle/CSharpMemberOrderPattern/CustomPattern/@EntryValue">&lt;?xml version="1.0" encoding="utf-8" ?&gt;&#xD;
&#xD;
&lt;!--&#xD;
I. Overall&#xD;
&#xD;
I.1 Each pattern can have &lt;Match&gt;....&lt;/Match&gt; element. For the given type declaration, the pattern with the match, evaluated to 'true' with the largest weight, will be used &#xD;
I.2 Each pattern consists of the sequence of &lt;Entry&gt;...&lt;/Entry&gt; elements. Type member declarations are distributed between entries&#xD;
I.3 If pattern has RemoveAllRegions="true" attribute, then all regions will be cleared prior to reordering. Otherwise, only auto-generated regions will be cleared&#xD;
I.4 The contents of each entry is sorted by given keys (First key is primary,  next key is secondary, etc). Then the declarations are grouped and en-regioned by given property&#xD;
&#xD;
II. Available match operands&#xD;
&#xD;
Each operand may have Weight="..." attribute. This weight will be added to the match weight if the operand is evaluated to 'true'.&#xD;
The default weight is 1&#xD;
&#xD;
II.1 Boolean functions:&#xD;
II.1.1 &lt;And&gt;....&lt;/And&gt;&#xD;
II.1.2 &lt;Or&gt;....&lt;/Or&gt;&#xD;
II.1.3 &lt;Not&gt;....&lt;/Not&gt;&#xD;
&#xD;
II.2 Operands&#xD;
II.2.1 &lt;Kind Is="..."/&gt;. Kinds are: class, struct, interface, enum, delegate, type, constructor, destructor, property, indexer, method, operator, field, constant, event, member&#xD;
II.2.2 &lt;Name Is="..." [IgnoreCase="true/false"] /&gt;. The 'Is' attribute contains regular expression&#xD;
II.2.3 &lt;HasAttribute CLRName="..." [Inherit="true/false"] /&gt;. The 'CLRName' attribute contains regular expression&#xD;
II.2.4 &lt;Access Is="..."/&gt;. The 'Is' values are: public, protected, internal, protected internal, private&#xD;
II.2.5 &lt;Static/&gt;&#xD;
II.2.6 &lt;Abstract/&gt;&#xD;
II.2.7 &lt;Virtual/&gt;&#xD;
II.2.8 &lt;Override/&gt;&#xD;
II.2.9 &lt;Sealed/&gt;&#xD;
II.2.10 &lt;Readonly/&gt;&#xD;
II.2.11 &lt;ImplementsInterface CLRName="..."/&gt;. The 'CLRName' attribute contains regular expression&#xD;
II.2.12 &lt;HandlesEvent /&gt;&#xD;
--&gt;&#xD;
&#xD;
&lt;Patterns xmlns="urn:shemas-jetbrains-com:member-reordering-patterns"&gt;&#xD;
&#xD;
    &lt;!-- Do not reorder COM interfaces --&gt;&#xD;
    &lt;Pattern&gt;&#xD;
        &lt;Match&gt;&#xD;
            &lt;And Weight="2000"&gt;&#xD;
                &lt;Kind Is="interface"/&gt;&#xD;
                &lt;HasAttribute CLRName="System.Runtime.InteropServices.InterfaceTypeAttribute"&#xD;
                              Inherit="true"/&gt;&#xD;
            &lt;/And&gt;&#xD;
        &lt;/Match&gt;&#xD;
    &lt;/Pattern&gt;&#xD;
&#xD;
    &lt;!-- Do not reorder P/Invoke structs --&gt;&#xD;
    &lt;Pattern&gt;&#xD;
        &lt;Match&gt;&#xD;
            &lt;And Weight="2000"&gt;&#xD;
                &lt;Or&gt;&#xD;
                    &lt;Kind Is="struct"/&gt;&#xD;
                    &lt;Kind Is="class"/&gt;&#xD;
                &lt;/Or&gt;&#xD;
                &lt;HasAttribute CLRName="System.Runtime.InteropServices.StructLayoutAttribute"&#xD;
                              Inherit="true"/&gt;&#xD;
            &lt;/And&gt;&#xD;
        &lt;/Match&gt;&#xD;
    &lt;/Pattern&gt;&#xD;
&#xD;
    &lt;!-- Do not reorder P/Invoke classes (called xxxNativeMethods) --&gt;&#xD;
    &lt;Pattern&gt;&#xD;
        &lt;Match&gt;&#xD;
            &lt;And Weight="2000"&gt;&#xD;
                &lt;Kind Is="class"/&gt;&#xD;
                &lt;Name Is=".*NativeMethods" /&gt;&#xD;
            &lt;/And&gt;&#xD;
        &lt;/Match&gt;&#xD;
    &lt;/Pattern&gt;&#xD;
&#xD;
    &lt;!-- StyleCop pattern --&gt;&#xD;
    &lt;Pattern RemoveAllRegions="true"&gt;&#xD;
        &lt;Match&gt;&#xD;
            &lt;Or Weight="1000" &gt;&#xD;
                &lt;Kind Is="class" /&gt;&#xD;
                &lt;Kind Is="struct" /&gt;&#xD;
                &lt;Kind Is="interface"/&gt;&#xD;
            &lt;/Or&gt;&#xD;
        &lt;/Match&gt;&#xD;
&#xD;
        &lt;!-- constants and fields --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Or&gt;&#xD;
                    &lt;Kind Is="constant"/&gt;&#xD;
                    &lt;Kind Is="field"/&gt;&#xD;
                &lt;/Or&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private"/&gt;&#xD;
                &lt;Kind Order="constant field"/&gt;&#xD;
                &lt;Readonly/&gt;&#xD;
                &lt;Static/&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- constructors --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Or Weight="200"&gt;&#xD;
                    &lt;Kind Is="constructor"/&gt;&#xD;
                    &lt;Kind Is="destructor"/&gt;&#xD;
                &lt;/Or&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Static/&gt;&#xD;
                &lt;Kind Order="constructor destructor"/&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private"/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- delegates --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Kind Is="delegate"/&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private" /&gt;&#xD;
                &lt;Static /&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- events --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Kind Is="event"/&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private" /&gt;&#xD;
                &lt;Static /&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- enum --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Kind Is="enum"/&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private" /&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- interfaces --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Kind Is="interface" /&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private" /&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- properties --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Kind Is="property"/&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private"/&gt;&#xD;
                &lt;Static/&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- indexers --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Kind Is="indexer"&#xD;
                      Weight="300" /&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private" /&gt;&#xD;
                &lt;Static/&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- operator --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Kind Is="operator"/&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private" /&gt;&#xD;
                &lt;Static/&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- public methods --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;And&gt;&#xD;
                    &lt;Kind Is="method"/&gt;&#xD;
                    &lt;Access Is="public"/&gt;&#xD;
                &lt;/And&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Access Order="public"/&gt;&#xD;
                &lt;Static/&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- Implemented Interfaces --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;And Weight="500"&gt;&#xD;
                    &lt;Kind Is="method"/&gt;&#xD;
                    &lt;ImplementsInterface CLRName=".*"/&gt;&#xD;
                &lt;/And&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;ImplementsInterface /&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private"/&gt;&#xD;
                &lt;Static/&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- other methods --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Kind Is="method"/&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private"/&gt;&#xD;
                &lt;Static/&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- Nested structs --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Kind Is="struct"&#xD;
                      Weight="600" /&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Static /&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private" /&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- Nested classes --&gt;&#xD;
        &lt;Entry&gt;&#xD;
            &lt;Match&gt;&#xD;
                &lt;Kind Is="class"&#xD;
                      Weight="700" /&gt;&#xD;
            &lt;/Match&gt;&#xD;
            &lt;Sort&gt;&#xD;
                &lt;Static /&gt;&#xD;
                &lt;Access Order="public internal protected-internal protected private" /&gt;&#xD;
                &lt;Name/&gt;&#xD;
            &lt;/Sort&gt;&#xD;
        &lt;/Entry&gt;&#xD;
&#xD;
        &lt;!-- all other members --&gt;&#xD;
        &lt;Entry/&gt;&#xD;
&#xD;
    &lt;/Pattern&gt;&#xD;
  &#xD;
&lt;/Patterns&gt;&#xD;
</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_AFTER_TYPECAST_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_TYPEOF_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_SIZEOF_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES/@EntryValue">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_IFELSE_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_FOR_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_FOREACH_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_WHILE_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_USING_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_FIXED_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_PARAMETER/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_ARGUMENT/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_EXTENDS_LIST/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_EXPRESSION/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_ARRAY_AND_OBJECT_INITIALIZER/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTLINE_TYPE_PARAMETER_LIST/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTLINE_TYPE_PARAMETER_CONSTRAINS/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_FOR_STMT/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTIPLE_DECLARATION/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_LINQ_QUERY/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_AFTER_INVOCATION_LPAR/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_AFTER_DECLARATION_LPAR/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_BEFORE_BINARY_OPSIGN/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_BEFORE_FIRST_TYPE_PARAMETER_CONSTRAINT/@EntryValue">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_PARAMETERS_STYLE/@EntryValue">CHOP_IF_LONG</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_ARGUMENTS_STYLE/@EntryValue">CHOP_IF_LONG</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_EXTENDS_LIST_STYLE/@EntryValue">CHOP_IF_LONG</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INDENT_ANONYMOUS_METHOD_BLOCK/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/STICK_COMMENT/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/LINE_FEED_AT_FILE_END/@EntryValue">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=CA/@EntryIndexedValue">CA</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=IA/@EntryIndexedValue">IA</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=IE/@EntryIndexedValue">IE</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=LocalConstants/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="" Suffix="" Style="AaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateInstanceFields/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="_" Suffix="" Style="aaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateStaticFields/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="_" Suffix="" Style="aaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateStaticReadonly/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="_" Suffix="" Style="aaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PublicFields/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="_" Suffix="" Style="aaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/VBNaming/PredefinedNamingRules/=LocalConstants/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="" Suffix="" Style="AaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/VBNaming/PredefinedNamingRules/=PrivateInstanceFields/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="" Suffix="" Style="aaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/VBNaming/PredefinedNamingRules/=PrivateStaticFields/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="" Suffix="" Style="aaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/VBNaming/PredefinedNamingRules/=PrivateStaticReadonly/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="" Suffix="" Style="aaBb" /&gt;</s:String>
	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateBlankLinesAroundFieldToBlankLinesAroundProperty/@EntryIndexedValue">True</s:Boolean>
	
	<s:String x:Key="/Default/Environment/UnitTesting/NUnitProvider/UseAddins/@EntryValue">Never</s:String>
	<s:String x:Key="/Default/Environment/UserInterface/ShortcutSchemeName/@EntryValue">None</s:String>
	<s:Boolean x:Key="/Default/Housekeeping/SolutionSettingsUpgraded/IsUpgraded/@EntryValue">True</s:Boolean></wpf:ResourceDictionary>
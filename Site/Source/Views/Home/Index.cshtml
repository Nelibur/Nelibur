<!DOCTYPE html>

<html>
    <head>
        <title>Nelibur - the power of WCF at your fingertips</title>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body data-spy="scroll" data-target=".navbar-collapse">
        <header class="navbar navbar-inverse navbar-fixed-top" role="navigation">
            <div class="container">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="#">Nelibur</a>
                </div>
                <div  class="collapse navbar-collapse">
                    <ul class="nav navbar-nav">
                        <li class="active"><a href="#home">Home</a></li>
                        <li><a href="https://github.com/Nelibur/Nelibur">GitHub page</a></li>
                        <li><a href="#example">Examples</a></li>
                    </ul>
                </div>
            </div>
        </header>
        <div id="home" class="jumbotron" style="padding-top: 50px">
            <div id="home" class="container">
                <h1><img src="https://avatars0.githubusercontent.com/u/6294792?s=140" alt="Logo" class="img-rounded"> Nelibur</h1>
                <p>
                    is message based web service framework on the pure WCF. Nelibur simplifies creating high-performance and message based web services and you certainly have all the power of the WCF
                </p>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-4">
                    <h2><span class="glyphicon glyphicon-chevron-right"></span> Based on the pure WCF</h2>
                    <p>Nelibur uses only standart WCF implementation with no modifications</p>
                </div>
                <div class="col-md-4">
                    <h2><span class="glyphicon glyphicon-chevron-right"></span> Extreamly fast</h2>
                    <p>Framework is virtually as fast as WCF itself</p>
                    <p><a class="btn btn-default">See comparison</a></p>
                </div>
                <div class="col-md-4">
                    <h2><span class="glyphicon glyphicon-chevron-right"></span> REST and SOAP</h2>
                    <p>You can build powerful services both SOAP and REST based services</p>
                    <p><a class="btn btn-default" href="https://github.com/Nelibur/Nelibur/wiki">Check out documentation</a></p>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <h3>
                        <span class="glyphicon glyphicon-ok"></span>
                        NuGet Package is available at <a href="http://www.nuget.org/packages/Nelibur/">NuGet.org</a>
                    </h3>
                    <p>
                        Or you can install it via <a href="http://docs.nuget.org/docs/start-here/using-the-package-manager-console">Package Manager Console</a>
                    </p>
                    <div class="col-md-11">
                        <code class="nuget-badge">
                            PM> Install-Package Nelibur -Pre
                        </code>
                    </div>
                </div>

                <div class="col-md-6">
                    <h3>
                        <span class="glyphicon glyphicon-ok"></span>
                        Source code is available at <a href="https://github.com/Nelibur/Nelibur">GitHub</a>
                    </h3>
                    <p>
                        As well as latest examples and other useful stuff
                    </p>
                </div>
            </div>
        </div>

        <div class="container" id="example">
            <div class="col-md-12">
                <div class="row">
                    <h2>Examples</h2>
                </div>
                <div class="row">
                    <h3><a data-toggle="collapse" data-target="#rest-service">Creating simple REST service</a></h3>
                </div>
                <div id="rest-service" class="collapse container">
                    <div class="row">
                        <h4>Creating service itself</h4>
                    </div>
                    <div class="row">
                        <pre class="prettyprint lang-cs">
[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
public sealed class SampleWebService : IJsonService
{
    public void Delete(Message message)
    {
        RestServiceProcessor.Process(message);
    }
    public Message DeleteWithResponse(Message message)
    {
        return RestServiceProcessor.ProcessWithResponse(message);
    }
    public void Get(Message message)
    {
        RestServiceProcessor.Process(message);
    }
    public Message GetWithResponse(Message message)
    {
        return RestServiceProcessor.ProcessWithResponse(message);
    }
    public void Post(Message message)
    {
        RestServiceProcessor.Process(message);
    }
    public Message PostWithResponse(Message message)
    {
        return RestServiceProcessor.ProcessWithResponse(message);
    }
    public void Put(Message message)
    {
        RestServiceProcessor.Process(message);
    }
    public Message PutWithResponse(Message message)
    {
        return RestServiceProcessor.ProcessWithResponse(message);
    }
}
                </pre>
                    </div>
                    <div class="row">
                        <h4>Configuring WCF</h4>
                    </div>
                    <div class="row">
                        <pre class="prettyprint">
&lt;!--WCF--&gt;
&lt;system.serviceModel&gt;
  &lt;services&gt;
    &lt;service name=&quot;SimpleRestService.SampleWebService&quot;&gt;
      &lt;host&gt;
        &lt;baseAddresses&gt;
          &lt;add baseAddress=&quot;http://localhost:9092/webhost&quot; /&gt;
        &lt;/baseAddresses&gt;
      &lt;/host&gt;
      &lt;endpoint binding=&quot;webHttpBinding&quot;
                  contract=&quot;Nelibur.ServiceModel.Contracts.IJsonService&quot; /&gt;
    &lt;/service&gt;
  &lt;/services&gt;
&lt;/system.serviceModel&gt;
</pre>

                    </div>
                    <div class="row">
                        <h4>Create message processor</h4>
                    </div>
                    <div class="row">
                        <pre class="prettyprint">
public sealed class ClientProcessor : IPostWithResponse<createclientrequest>,
                                    IGetWithResponse<getclientrequest>,
                                    IDelete<deleteclientrequest>,
                                    IPutWithResponse<updateclientrequest>
{
    private static List<client> _clients = new List<client>();
    public void Delete(DeleteClientRequest request)
    {
        Console.WriteLine("Delete Request: {0}\n", request);
        _clients = _clients.Where(x => x.Id != request.Id).ToList();
    }
    public object GetWithResponse(GetClientRequest request)
    {
        Console.WriteLine("GetWithResponse Request: {0}", request);
        Client client = _clients.Single(x => x.Id == request.Id);
        return new ClientResponse { Id = client.Id, Email = client.Email };
    }
    public object PostWithResponse(CreateClientRequest request)
    {
        Console.WriteLine("PostWithResponse Request: {0}", request);
        var client = new Client
        {
            Id = Guid.NewGuid(),
            Email = request.Email
        };
        _clients.Add(client);
        return new ClientResponse { Id = client.Id, Email = client.Email };
    }
    public object PutWithResponse(UpdateClientRequest request)
    {
        Console.WriteLine("PutWithResponse Request: {0}", request);
        Client client = _clients.Single(x => x.Id == request.Id);
        client.Email = request.Email;
        return new ClientResponse { Id = client.Id, Email = client.Email };
    }
}
</pre>
                    </div>
                </div>
            </div>
        </div>

        <footer class="panel-footer" style="margin-top: 40px">
            <div class="container">
                <ul class="list-unstyled">
                    <li><a href="https://twitter.com/Nelibur">Follow us on Twitter</a></li>
                    <li><a href="https://groups.google.com/forum/#!forum/nelibur">Checkout Google Groups page</a></li>
                </ul>
            </div>
        </footer>

        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"> </script>

        <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
        <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
        <link rel="stylesheet" href="Content/nelibur.css">
        <script src="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"> </script>
        <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=desert"> </script>
        <script>
            (function(i, s, o, g, r, a, m) {
                i['GoogleAnalyticsObject'] = r;
                i[r] = i[r] || function() {
                    (i[r].q = i[r].q || []).push(arguments);
                }, i[r].l = 1 * new Date();
                a = s.createElement(o),
                m = s.getElementsByTagName(o)[0];
                a.async = 1;
                a.src = g;
                m.parentNode.insertBefore(a, m);
            })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
            ga('create', 'UA-49279005-1', 'nelibur.org');
            ga('send', 'pageview');
        </script>
    </body>
</html>